// Importa√ß√µes de m√≥dulos necess√°rios
const http = require('http'); // Para criar o servidor HTTP para o Render
const { default: makeWASocket, useMultiFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys');
const pino = require('pino'); // Para logs do Baileys
const qrcode = require('qrcode-terminal')

// --- VARI√ÅVEIS GLOBAIS ---
// Objeto para armazenar o estado da conversa de cada usu√°rio
const userState = {};

// Fun√ß√£o auxiliar para delays (esperas) ass√≠ncronos
const delay = ms => new Promise(res => setTimeout(res, ms));

// --- SERVIDOR HTTP B√ÅSICO PARA O RENDER ---
// Define a porta, usando a vari√°vel de ambiente do Render (PORT) ou 3000 como padr√£o
const PORT = process.env.PORT || 3000; 

// Cria um servidor HTTP b√°sico. O Render exige que sua aplica√ß√£o escute em uma porta.
const server = http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Chatbot is running with Baileys!\n'); // Mensagem atualizada para Baileys
});

// Faz o servidor escutar na porta definida
server.listen(PORT, () => {
    console.log(`HTTP server listening on port ${PORT}`);
});

// --- FUN√á√ÉO PRINCIPAL DE INICIALIZA√á√ÉO DO BOT BAILLEYS ---
async function startBot() {
    // Para persist√™ncia de sess√£o (inicialmente em arquivos, para simplificar)
    // Para persistir em DB como MongoDB, ser√° preciso adaptar esta parte.
    const { state, saveCreds } = await useMultiFileAuthState('baileys_auth_info');

    // Cria a inst√¢ncia do socket do Baileys
    const sock = makeWASocket({
        logger: pino({ level: 'silent' }), // N√≠vel de log do Baileys (silent para menos logs)
        auth: state, // Estado da autentica√ß√£o
        browser: ['Chatbot MAQ SERVICE', 'Chrome', '10.0'], // Informa√ß√µes do navegador (customiz√°vel)
    });

    // --- EVENTOS DO BAILLEYS ---

    // Evento: Estado da conex√£o
    sock.ev.on('connection.update', (update) => {
        const { connection, lastDisconnect, qr } = update;

        if (qr) {
    // Se um QR code for gerado, imprima-o (precisar√° escanear no primeiro uso)
    console.log('QR Code para Baileys gerado. Escaneie-o para continuar:');
    // qrcode.generate(qr, { small: true }); // Baileys j√° imprime se printQRInTerminal for true
    // Ou voc√™ pode usar qrcode-terminal aqui se quiser um visual espec√≠fico
}

        if (connection === 'close') {
            const shouldReconnect = (lastDisconnect.error?.output?.statusCode !== DisconnectReason.loggedOut);
            console.log('Conex√£o fechada. Motivo:', lastDisconnect.error, 'Reconectar?', shouldReconnect);
            // Tenta reconectar se n√£o foi um logout intencional
            if (shouldReconnect) {
                startBot();
            }
        } else if (connection === 'open') {
            console.log('Bot MAQ SERVICE conectado com sucesso (Baileys)!');
        }
    });

    // Evento: Credenciais atualizadas (importante para persist√™ncia)
    sock.ev.on('creds.update', saveCreds);

    // Evento: Nova mensagem recebida
    sock.ev.on('messages.upsert', async ({ messages, type }) => {
        if (type === 'notify') {
            for (const msg of messages) {
                if (!msg.key.fromMe && !msg.key.remoteJid.endsWith('@g.us')) { // Ignora minhas mensagens e mensagens de grupo
                    // Processar a mensagem
                    const senderId = msg.key.remoteJid;
                    const messageBody = msg.message?.conversation || msg.message?.extendedTextMessage?.text || '';
                    const pushName = msg.pushName || 'Cliente';

                    console.log(`Mensagem de ${pushName} (${senderId}): ${messageBody}`);

                    // Chame sua l√≥gica de funil de atendimento aqui
                    await processMessage(sock, senderId, messageBody.trim(), pushName);
                }
            }
        }
    });

    return sock; // Retorna a inst√¢ncia do socket
}

// --- L√ìGICA DE FUNIL DE ATENDIMENTO (ADAPTADA PARA BAILLEYS) ---
async function processMessage(sock, chatId, messageBody, userName) {
    // COMANDO GLOBAL PARA VOLTAR AO MENU
    if (messageBody.match(/^(menu|voltar|menu principal|cancelar)$/i)) {
        delete userState[chatId]; // Usa chatId como key para o estado do usu√°rio
        // O Baileys n√£o tem sendStateTyping direto para conversas
        await delay(1000); 
        await sendMainMenu(sock, chatId, userName);
        return;
    }

    // EST√ÅGIOS DA CONVERSA PARA COLETAR DADOS
    if (userState[chatId]) {
        const stage = userState[chatId].stage;

        if (stage === 'awaiting_appliance') {
            userState[chatId].data.appliance = messageBody;
            userState[chatId].stage = 'awaiting_model';
            await sock.sendMessage(chatId, { text: `‚úÖ Aparelho anotado! Agora, por favor, informe a *marca e o modelo*.\n\n*Exemplo: Brastemp Clean BWG11A*\n\n_(Para cancelar, digite *Menu*)_` });
            return;
        }

        if (stage === 'awaiting_model') {
            userState[chatId].data.model = messageBody;
            userState[chatId].stage = 'awaiting_problem';
            await sock.sendMessage(chatId, { text: `‚úÖ Modelo anotado! Para finalizar, por favor, *descreva o problema* que voc√™ est√° enfrentando.\n\n_(Para cancelar, digite *Menu*)_` });
            return;
        }
        
        if (stage === 'awaiting_problem') {
            userState[chatId].data.problem = messageBody;
            await delay(2000);

            const summary = `Obrigado pelas informa√ß√µes! Seu pedido foi registrado com sucesso:\n\n*Eletrodom√©stico:* ${userState[chatId].data.appliance}\n*Marca/Modelo:* ${userState[chatId].data.model}\n*Problema:* ${userState[chatId].data.problem}\n\nEm breve, um de nossos t√©cnicos entrar√° em contato.\n\nNosso hor√°rio de atendimento √© de *Segunda a S√°bado, das 07h √†s 18h*.`;
            
            await sock.sendMessage(chatId, { text: summary });
            delete userState[chatId]; // Limpa o estado para o pr√≥ximo atendimento
            return; 
        }
    }

    // --- FLUXO PRINCIPAL E MENU ---

    // Gatilho para iniciar a conversa (se n√£o estiver em um fluxo)
    if (messageBody.match(/^(oi|ola|ol√°|bom dia|boa tarde|boa noite|tenho interesse no servi√ßo da maq service\.?)$/i) && !userState[chatId]) {
        await delay(1500);
        await sendMainMenu(sock, chatId, userName);
        return;
    }

    // Respostas baseadas na sele√ß√£o NUM√âRICA
    if (!userState[chatId]) {
        switch(messageBody) {
            case '1':
                userState[chatId] = { stage: 'awaiting_appliance', data: {} };
                await sock.sendMessage(chatId, { text: `Ok, vamos iniciar seu pedido de or√ßamento.\n\nPrimeiro, informe qual o eletrodom√©stico precisa de conserto?\n\n*Ex: M√°quina de Lavar, Ventilador, etc.*\n\n_(Para cancelar, digite *Menu*)_` });
                break;

            case '2':
                await delay(1500);
                const servicesMessage = `Somos especialistas no conserto e manuten√ß√£o de:\n\n‚úÖ M√°quinas de lavar roupa\n‚úÖ Tanquinhos (Lavadoras semiautom√°ticas)\n‚úÖ Centr√≠fugas de roupa\n‚úÖ Ventiladores de todos os tipos\n\nPara solicitar um servi√ßo, digite *Menu* e depois a op√ß√£o *1*.`;
                await sock.sendMessage(chatId, { text: servicesMessage });
                break;

            case '3':
                await delay(1500);
                await sock.sendMessage(chatId, { text: `Certo. Sua mensagem ser√° encaminhada para o propriet√°rio. Por favor, aguarde que ele responder√° assim que poss√≠vel aqui mesmo.` });
                break;

            default: // Resposta padr√£o para op√ß√µes inv√°lidas fora de um fluxo
                await delay(1000);
                await sock.sendMessage(chatId, { text: `Desculpe, n√£o entendi. Por favor, digite o *n√∫mero* da op√ß√£o desejada ou *Menu* para voltar ao menu principal.` });
                break;
        }
    }
}

// Fun√ß√£o para enviar o menu principal em formato de texto
async function sendMainMenu(sock, chatId, userName) {
    const menuMessage = `Ol√°, ${userName}! üëã Sou o assistente virtual da *MAQ SERVICE*.\n\nSe voc√™ deseja adiantar o assunto, por favor, *digite o n√∫mero* da op√ß√£o desejada:\n\n*1* - Solicitar Or√ßamento/Visita T√©cnica\n*2* - Consultar Servi√ßos Oferecidos\n*3* - Falar com o Propriet√°rio`;
    await sock.sendMessage(chatId, { text: menuMessage });
}

// Inicia o bot
startBot();